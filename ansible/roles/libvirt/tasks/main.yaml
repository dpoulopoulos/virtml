---
# Trying to `undefine` or `shutdown` a domain that does not exist will result in an error.
# To avoid this, we need to get the list of existing domains first.
# Then, run tasks like `undefine` and `shutdown` only if the domain exists.
- name: Get existing domains
  community.libvirt.virt:
    command: list_vms
  delegate_to: "{{ vm_host }}"
  register: domains

# If the state for the current host is set to `present` in the `state.ini` file:
# * Create a .qcow2 disk image if it does not exist
# * Set a MAC address for the host
# * Define the libvirt domain.
# * Start the libvirt domain, if the PXE configuration is done.
- name: Define/Start libvirt domain
  block:
  - name: Create a .qcow2 disk image if it does not exist
    become: true
    delegate_to: "{{ vm_host }}"
    ansible.builtin.command:
      cmd: |
        qemu-img create -f qcow2 {{ libvirt_pool_dir }}/{{ inventory_hostname }}.qcow2 32G
      creates: "{{ libvirt_pool_dir }}/{{ inventory_hostname }}.qcow2"
  # Read the MAC address from the hostvars.
  # If the MAC address does not exist, generate a new one on the fly,
  # and set it as a fact.
  - name: Get or create the MAC address variable
    set_fact:
      mac_address: "{{ hostvars[inventory_hostname].mac_address | 
                      default('52:54:00' | community.general.random_mac) }}"
  - name: Write MAC address to the inventory file
    community.general.ini_file:
      path: ../inventory/state.ini
      section: all
      option: "{{ inventory_hostname }} mac_address"
      value: "{{ mac_address }}"
      no_extra_spaces: true
    delegate_to: "{{ vm_host }}"
    throttle: 1
    notify: reload-inventory
  # The `define` command provided by the `community.libvirt` module is not idempotent.
  # It won't fail if the domain already exists, but the repercussions of running it
  # on an existing domain are not clear. To avoid any potential issues, run it
  # only if the domain does not exist.
  - name: Define domain
    become: true
    delegate_to: "{{ vm_host }}"
    community.libvirt.virt:
      command: define
      xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
    when: inventory_hostname not in domains.list_vms
  - name: Start domain
    community.libvirt.virt:
      name: "{{ inventory_hostname }}"
      state: running
    delegate_to: "{{ vm_host }}"
    when: pxe_done
  - name: Pause execution until Debian installation is complete
    ansible.builtin.pause:
      prompt: |
        "Wait for the Debian installation to complete, then press Enter to continue."
    delegate_to: "{{ vm_host }}"
    when: pxe_done
  when: state == 'present'

# If the state for the current host is set to `absent` in the `state.ini` file:
# * Stop the domain if it exists.
# * Undefine the domain
# * Remove the MAC address from the inventory file
# * Remove the .qcow2 disk image
# Note that the `shutdown` and `undefine` commands are idempotent.
# They will fail if the domain does not exist. Run them only if the domain exists.
- name: Destroy libvirt domain
  block:
  - name: Stop the domain if it exists
    community.libvirt.virt:
      name: "{{ inventory_hostname }}"
      state: shutdown
    delegate_to: "{{ vm_host }}"
    when: inventory_hostname in domains.list_vms
  - name: Undefine the domain
    community.libvirt.virt:
      name: "{{ inventory_hostname }}"
      command: undefine
      flags:
        - nvram
    delegate_to: "{{ vm_host }}"
    when: inventory_hostname in domains.list_vms
  # We need to postpone the removal of the MAC address from the inventory file
  # until the PXE Server is also updated.
  - name: Remove the MAC address from the inventory file
    community.general.ini_file:
      path: ../inventory/state.ini
      section: all
      option: "{{ inventory_hostname }} mac_address"
      state: absent
    delegate_to: "{{ vm_host }}"
    throttle: 1
    notify: reload-inventory
    when: pxe_done and inventory_hostname not in domains.list_vms
  - name: Remove the .qcow2 disk image
    become: true
    delegate_to: "{{ vm_host }}"
    ansible.builtin.file:
      path: "{{ libvirt_pool_dir }}/{{ inventory_hostname }}.qcow2"
      state: absent
  when: state == 'absent'
