---
# Create a .qcow2 disk image, if it does not exist.
# If a matching file already exists, this step will not be run, due to the
# `creates` parameter.
- name: Create a .qcow2 disk image if it does not exist
  become: true
  delegate_to: "{{ vm_host }}"
  ansible.builtin.command:
    cmd: |
      qemu-img create -f qcow2 {{ libvirt_pool_dir }}/{{ inventory_hostname }}.qcow2 32G
    creates: "{{ libvirt_pool_dir }}/{{ inventory_hostname }}.qcow2"

# Read the MAC address from the hostvars.
# If the MAC address does not exist, generate a new one on the fly,
# and set it as a fact.
- name: Get or create the MAC address variable
  set_fact:
    mac_address: "{{ hostvars[inventory_hostname].mac_address | 
                     default('52:54:00' | community.general.random_mac) }}"

# Write the MAC address back to the inventory file, and reload it.
- name: Write the MAC address to the inventory file
  community.general.ini_file:
    path: state.ini
    section: all
    option: "{{ inventory_hostname }} mac_address"
    value: "{{ mac_address }}"
    no_extra_spaces: true
  delegate_to: localhost
  throttle: 1
  notify: reload-inventory

- name: Create the QEMU VM
  become: true
  delegate_to: "{{ vm_host }}"
  block:
    - name: Define the VM
      community.libvirt.virt:
        command: define
        xml: "{{ lookup('template', 'vm-template.xml.j2') }}"

- name: Start the PXE client
  community.libvirt.virt:
    name: "{{ inventory_hostname }}"
    command: start
    state: running
  delegate_to: "{{ vm_host }}"
  when: pxe_done
